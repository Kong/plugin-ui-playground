{
  "fields": [
    {
      "consumer": {
        "reference": "consumers",
        "description": "Custom type for representing a foreign key with a null value allowed.",
        "eq": null,
        "type": "foreign"
      }
    },
    {
      "consumer_group": {
        "reference": "consumer_groups",
        "description": "Custom type for representing a foreign key with a null value allowed.",
        "eq": null,
        "type": "foreign"
      }
    },
    {
      "protocols": {
        "default": [
          "grpc",
          "grpcs",
          "http",
          "https"
        ],
        "elements": {
          "type": "string",
          "one_of": [
            "grpc",
            "grpcs",
            "http",
            "https"
          ]
        },
        "type": "set",
        "required": true,
        "description": "A set of strings representing HTTP protocols."
      }
    },
    {
      "config": {
        "fields": [
          {
            "session": {
              "type": "record",
              "fields": [
                {
                  "host": {
                    "referenceable": true,
                    "description": "The IPv4 or IPv6 address or host name to connect to (see: https://docs.solace.com/API-Developer-Online-Ref-Documentation/c/index.html#host-entry).",
                    "required": true,
                    "type": "string"
                  }
                },
                {
                  "vpn_name": {
                    "len_max": 32,
                    "type": "string",
                    "required": false,
                    "description": "The name of the Message VPN to attempt to join when connecting to an event broker."
                  }
                },
                {
                  "authentication": {
                    "entity_checks": [
                      {
                        "conditional": {
                          "then_field": "username",
                          "if_field": "scheme",
                          "then_match": {
                            "required": true
                          },
                          "if_match": {
                            "eq": "BASIC"
                          }
                        }
                      },
                      {
                        "conditional": {
                          "then_field": "password",
                          "if_field": "scheme",
                          "then_match": {
                            "required": true
                          },
                          "if_match": {
                            "eq": "BASIC"
                          }
                        }
                      },
                      {
                        "conditional_at_least_one_of": {
                          "if_match": {
                            "eq": "OAUTH2"
                          },
                          "if_field": "scheme",
                          "then_at_least_one_of": [
                            "access_token",
                            "access_token_header",
                            "id_token",
                            "id_token_header"
                          ],
                          "then_err": "must set one of %s when 'scheme' is 'OAUTH2'"
                        }
                      }
                    ],
                    "type": "record",
                    "required": true,
                    "fields": [
                      {
                        "scheme": {
                          "default": "BASIC",
                          "description": "The client authentication scheme used when connection to an event broker.",
                          "one_of": [
                            "NONE",
                            "BASIC",
                            "OAUTH2"
                          ],
                          "required": true,
                          "type": "string"
                        }
                      },
                      {
                        "username": {
                          "len_max": 189,
                          "description": "The username used with `BASIC` authentication scheme when connecting to an event broker.",
                          "encrypted": true,
                          "referenceable": true,
                          "required": false,
                          "type": "string"
                        }
                      },
                      {
                        "password": {
                          "len_max": 128,
                          "description": "The password used with `BASIC` authentication scheme when connecting to an event broker.",
                          "encrypted": true,
                          "referenceable": true,
                          "required": false,
                          "type": "string"
                        }
                      },
                      {
                        "access_token": {
                          "encrypted": true,
                          "description": "The OAuth2 access token used with `OAUTH2` authentication scheme when connecting to an event broker.",
                          "referenceable": true,
                          "required": false,
                          "type": "string"
                        }
                      },
                      {
                        "access_token_header": {
                          "required": false,
                          "type": "string"
                        }
                      },
                      {
                        "id_token": {
                          "encrypted": true,
                          "description": "The OpenID Connect ID token used with `OAUTH2` authentication scheme when connecting to an event broker.",
                          "referenceable": true,
                          "required": false,
                          "type": "string"
                        }
                      },
                      {
                        "id_token_header": {
                          "required": false,
                          "type": "string"
                        }
                      }
                    ],
                    "description": "Session authentication related configuration."
                  }
                },
                {
                  "connect_timeout": {
                    "between": [
                      100,
                      100000
                    ],
                    "default": 3000,
                    "description": "The timeout period (in milliseconds) for a connect operation to a given host (per host).",
                    "required": true,
                    "type": "integer"
                  }
                },
                {
                  "ssl_validate_certificate": {
                    "type": "boolean",
                    "default": false,
                    "required": true,
                    "description": "Indicates whether the API should validate server certificates with the trusted certificates."
                  }
                },
                {
                  "calculate_message_expiry": {
                    "type": "boolean",
                    "default": true,
                    "required": true,
                    "description": "If this property is true and time-to-live has a positive value in a message, the expiration time is calculated when the message is sent or received"
                  }
                },
                {
                  "generate_rcv_timestamps": {
                    "type": "boolean",
                    "default": true,
                    "required": true,
                    "description": "When enabled, a receive timestamp is recorded for each message."
                  }
                },
                {
                  "generate_send_timestamps": {
                    "type": "boolean",
                    "default": true,
                    "required": true,
                    "description": "When enabled, a send timestamp is automatically included (if not already present) in the Solace-defined fields for each message sent."
                  }
                },
                {
                  "generate_sender_id": {
                    "type": "boolean",
                    "default": true,
                    "required": true,
                    "description": "When enabled, a sender id is automatically included (if not already present) in the Solace-defined fields for each message sent."
                  }
                },
                {
                  "generate_sequence_number": {
                    "type": "boolean",
                    "default": true,
                    "required": true,
                    "description": "When enabled, a sequence number is automatically included (if not already present) in the Solace-defined fields for each message sent."
                  }
                },
                {
                  "properties": {
                    "keys": {
                      "match": "^SESSION_",
                      "not_one_of": [
                        "SESSION_HOST",
                        "SESSION_CONNECT_BLOCKING",
                        "SESSION_CONNECT_TIMEOUT_MS",
                        "SESSION_SEND_BLOCKING",
                        "SESSION_SUBSCRIBE_BLOCKING",
                        "SESSION_BLOCK_WHILE_CONNECTING",
                        "SESSION_SSL_VALIDATE_CERTIFICATE",
                        "SESSION_SEND_TIMESTAMP",
                        "SESSION_ASYNC_DNS",
                        "SESSION_CALCULATE_MESSAGE_EXPIRATION",
                        "SESSION_RCV_TIMESTAMP",
                        "SESSION_SEND_TIMESTAMP",
                        "SESSION_SEND_SENDER_ID",
                        "SESSION_SEND_SEQUENCE_NUMBER",
                        "SESSION_GUARANTEED_WITH_WEB_TRANSPORT",
                        "SESSION_VPN_NAME",
                        "SESSION_ACK_EVENT_MODE",
                        "SESSION_AUTHENTICATION_SCHEME",
                        "SESSION_USERNAME",
                        "SESSION_PASSWORD",
                        "SESSION_OAUTH2_ACCESS_TOKEN",
                        "SESSION_OIDC_ID_TOKEN"
                      ],
                      "required": true,
                      "type": "string"
                    },
                    "description": "Additional Solace session properties (each setting needs to have `SESSION_` prefix).",
                    "values": {
                      "referenceable": true,
                      "required": true,
                      "type": "string"
                    },
                    "required": false,
                    "type": "map"
                  }
                }
              ],
              "required": true,
              "description": "Session related configuration."
            }
          },
          {
            "flow": {
              "type": "record",
              "fields": [
                {
                  "binds": {
                    "elements": {
                      "fields": [
                        {
                          "name": {
                            "type": "string",
                            "required": true,
                            "description": "The name of the Queue that is the target of the bind. You can use $(uri_captures['<capture-identifier>']) in this field (replace `<capture-identifier>` with a real value, for example `$uri_captures['queue']` when the matched route has a path `~/(?<queue>[a-z]+)`)"
                          }
                        },
                        {
                          "type": {
                            "default": "QUEUE",
                            "type": "string",
                            "one_of": [
                              "QUEUE"
                            ],
                            "required": true,
                            "description": "The type of object to which this Flow is bound."
                          }
                        }
                      ],
                      "type": "record"
                    },
                    "type": "array",
                    "required": true,
                    "len_min": 1
                  }
                },
                {
                  "selector": {
                    "type": "string",
                    "required": false,
                    "description": "The selector when binding to an endpoint."
                  }
                },
                {
                  "ack_mode": {
                    "default": "CLIENT",
                    "type": "string",
                    "one_of": [
                      "AUTO",
                      "CLIENT"
                    ],
                    "required": true,
                    "description": "Controls how acknowledgments are generated for received Guaranteed messages. When set to `AUTO`, the messages are positively acknowledged upon receiving them. When set to 'CLIENT', the messages are positively or negatively acknowledged by Kong regarding to client delivery status."
                  }
                },
                {
                  "max_unacked_messages": {
                    "default": -1,
                    "ne": 0,
                    "gt": -2,
                    "type": "integer",
                    "required": true,
                    "description": "This property controls the maximum number of messages that may be unacknowledged on the Flow."
                  }
                },
                {
                  "window_size": {
                    "between": [
                      1,
                      255
                    ],
                    "default": 255,
                    "type": "integer",
                    "required": true,
                    "description": "The Guaranteed message window size for the Flow."
                  }
                },
                {
                  "wait_timeout": {
                    "between": [
                      1,
                      5000
                    ],
                    "default": 50,
                    "type": "integer",
                    "required": true,
                    "description": "Specifies in milliseconds how long to wait for messages to appear on each poll before giving up or retrying."
                  }
                },
                {
                  "functions": {
                    "elements": {
                      "type": "string"
                    },
                    "type": "array",
                    "required": false,
                    "description": "The Lua functions that manipulates the message being received from Solace. The `message` variable can be used to access the current message content, and the function can return a new content."
                  }
                },
                {
                  "properties": {
                    "keys": {
                      "match": "^FLOW_",
                      "not_one_of": [
                        "FLOW_BIND_ENTITY_ID",
                        "FLOW_BIND_NAME",
                        "FLOW_ACKMODE",
                        "FLOW_BIND_BLOCKING",
                        "FLOW_ACTIVE_FLOW_IND",
                        "FLOW_REQUIRED_OUTCOME_FAILED",
                        "FLOW_REQUIRED_OUTCOME_REJECTED",
                        "FLOW_WINDOWSIZE",
                        "FLOW_START_STATE",
                        "FLOW_MAX_UNACKED_MESSAGES",
                        "FLOW_SELECTOR",
                        "FLOW_AUTOACK",
                        "FLOW_TOPIC"
                      ],
                      "required": true,
                      "type": "string"
                    },
                    "type": "map",
                    "values": {
                      "referenceable": true,
                      "required": true,
                      "type": "string"
                    },
                    "required": false,
                    "description": "Additional Solace flow properties (each setting needs to have `FLOW_` prefix)."
                  }
                }
              ],
              "required": true,
              "description": "The flow related configuration."
            }
          },
          {
            "mode": {
              "default": "POLLING",
              "type": "string",
              "one_of": [
                "AUTO",
                "POLLING",
                "SERVER-SENT-EVENTS",
                "WEBSOCKET"
              ],
              "required": true,
              "description": "The mode of operation for the plugin. The `AUTO` determines the mode automatically from the client request."
            }
          },
          {
            "polling": {
              "type": "record",
              "fields": [
                {
                  "timeout": {
                    "between": [
                      0,
                      300000
                    ],
                    "default": 0,
                    "type": "integer",
                    "required": true,
                    "description": "Polling timeout in milliseconds. When set to `0`, the polling works like short-polling and waits at maximum the Flow `wait_timeout` amount of time for the new messages (short-polling). When set to larger than `0`, the connection is kept open and only closed after the timeout or in case messages appear earlier (long-polling)."
                  }
                }
              ],
              "required": true,
              "description": "The `POLLING` mode related configuration settings."
            }
          },
          {
            "websocket": {
              "type": "record",
              "fields": [
                {
                  "timeout": {
                    "between": [
                      1,
                      60000
                    ],
                    "default": 1000,
                    "type": "integer",
                    "required": true,
                    "description": "Specifies the network timeout threshold in milliseconds."
                  }
                },
                {
                  "max_recv_len": {
                    "default": 65536,
                    "gt": 0,
                    "type": "integer",
                    "required": true,
                    "description": "Specifies the maximal length of payload allowed when receiving WebSocket frames."
                  }
                },
                {
                  "max_send_len": {
                    "default": 65536,
                    "gt": 0,
                    "type": "integer",
                    "required": true,
                    "description": "Specifies the maximal length of payload allowed when sending WebSocket frames."
                  }
                }
              ],
              "required": true,
              "description": "The `WEBSOCKET` mode related configuration settings."
            }
          }
        ],
        "required": true,
        "type": "record"
      }
    }
  ],
  "entity_checks": []
}
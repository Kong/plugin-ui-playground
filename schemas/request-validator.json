{
  "fields": [
    {
      "protocols": {
        "default": [
          "grpc",
          "grpcs",
          "http",
          "https"
        ],
        "elements": {
          "type": "string",
          "one_of": [
            "grpc",
            "grpcs",
            "http",
            "https"
          ]
        },
        "type": "set",
        "required": true,
        "description": "A set of strings representing HTTP protocols."
      }
    },
    {
      "consumer_group": {
        "reference": "consumer_groups",
        "description": "Custom type for representing a foreign key with a null value allowed.",
        "eq": null,
        "type": "foreign"
      }
    },
    {
      "config": {
        "type": "record",
        "fields": [
          {
            "body_schema": {
              "description": "The request body schema specification. One of `body_schema` or `parameter_schema` must be specified.",
              "required": false,
              "type": "string"
            }
          },
          {
            "allowed_content_types": {
              "elements": {
                "required": true,
                "type": "string"
              },
              "default": [
                "application/json"
              ],
              "description": "List of allowed content types. The value can be configured with the `charset` parameter. For example, `application/json; charset=UTF-8`.",
              "type": "set"
            }
          },
          {
            "version": {
              "one_of": [
                "kong",
                "draft4",
                "draft6",
                "draft7",
                "draft201909",
                "draft202012"
              ],
              "description": "Which validator to use. Supported values are `kong` (default) for using Kong's own schema validator, or `draft4`, `draft7`, `draft201909`, and `draft202012` for using their respective JSON Schema Draft compliant validators.",
              "default": "kong",
              "required": true,
              "type": "string"
            }
          },
          {
            "parameter_schema": {
              "elements": {
                "type": "record",
                "fields": [
                  {
                    "in": {
                      "description": "The location of the parameter.",
                      "one_of": [
                        "query",
                        "header",
                        "path"
                      ],
                      "required": true,
                      "type": "string"
                    }
                  },
                  {
                    "name": {
                      "description": "The name of the parameter. Parameter names are case-sensitive, and correspond to the parameter name used by the `in` property. If `in` is `path`, the `name` field MUST correspond to the named capture group from the configured `route`.",
                      "required": true,
                      "type": "string"
                    }
                  },
                  {
                    "required": {
                      "description": "Determines whether this parameter is mandatory.",
                      "required": true,
                      "type": "boolean"
                    }
                  },
                  {
                    "style": {
                      "one_of": [
                        "label",
                        "form",
                        "matrix",
                        "simple",
                        "spaceDelimited",
                        "pipeDelimited",
                        "deepObject"
                      ],
                      "description": "Required when `schema` and `explode` are set. Describes how the parameter value will be deserialized depending on the type of the parameter value.",
                      "type": "string"
                    }
                  },
                  {
                    "explode": {
                      "description": "Required when `schema` and `style` are set. When `explode` is `true`, parameter values of type `array` or `object` generate separate parameters for each value of the array or key-value pair of the map. For other types of parameters, this property has no effect.",
                      "type": "boolean"
                    }
                  },
                  {
                    "schema": {
                      "description": "Required when `style` and `explode` are set. This is the schema defining the type used for the parameter. It is validated using `draft4` for JSON Schema draft 4 compliant validator. In addition to being a valid JSON Schema, the parameter schema MUST have a top-level `type` property to enable proper deserialization before validating.",
                      "type": "string"
                    }
                  }
                ],
                "entity_checks": [
                  {
                    "mutually_required": [
                      "style",
                      "explode",
                      "schema"
                    ]
                  },
                  {
                    "custom_entity_check": {
                      "field_sources": [
                        "style",
                        "in"
                      ]
                    }
                  }
                ]
              },
              "description": "Array of parameter validator specification. One of `body_schema` or `parameter_schema` must be specified.",
              "required": false,
              "type": "array"
            }
          },
          {
            "verbose_response": {
              "description": "If enabled, the plugin returns more verbose and detailed validation errors.",
              "default": false,
              "required": true,
              "type": "boolean"
            }
          },
          {
            "content_type_parameter_validation": {
              "description": "Determines whether to enable parameters validation of request content-type.",
              "default": true,
              "required": true,
              "type": "boolean"
            }
          }
        ],
        "required": true,
        "entity_checks": [
          {
            "at_least_one_of": [
              "body_schema",
              "parameter_schema"
            ]
          }
        ]
      }
    }
  ],
  "entity_checks": [
    {
      "custom_entity_check": {
        "field_sources": [
          "config"
        ]
      }
    }
  ]
}